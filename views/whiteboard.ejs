<!DOCTYPE html>
<html>
  <head>
    <title>Whiteboard</title>
    <script src="/iframecheck.js"></script>
    <link rel="stylesheet" href="/index.css" />
    <style>
      :root {
        --controls-width: 180px;
      }

      body {
        display: flex;
        height: 100vh;
        overflow: auto;
      }

      #controls {
        width: var(--controls-width);
        background-color: #f5f5f5;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        border-right: 1px solid #ccc;
      }

      .btn-link {
        display: block;
        text-decoration: none;
        margin-bottom: 10px;
      }

      .draggable {
        position: absolute;
        cursor: grab;
        width: 5%;
        aspect-ratio: 1;
      }

      #whiteboard-container {
        position: relative;
        width: 1200px;
        height: 600px;
        overflow: visible;
        text-align: center;
      }

      canvas#whiteboard {
        margin-top: 0;
        width: 1200px;
        height: 600px;
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
      }

      .color-swatch {
        width: 24px;
        height: 24px;
        margin: 4px;
        display: inline-block;
        cursor: pointer;
        border: 2px solid transparent;
        box-sizing: border-box;
      }

      .color-swatch.selected {
        box-shadow: 0 0 4px 2px #333;
      }

      .color-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 4px;
      }
      #game-phase-indicator {
        position: absolute;
        top: 10px;
        left: calc(var(--controls-width) + 70px);
        color: black;
      }
    </style>
  </head>

  <body>
    <div id="controls">
      <button
        id="back-button"
        style="
          top: 10px;
          left: 10px;
          background-color: rgb(0, 119, 255);
          color: white;
        "
      >
        ‚¨ÖÔ∏è Back
      </button>
      <script>
        document.getElementById('back-button').addEventListener('click', () => {
          window.parent.postMessage({ type: 'reverse-animation' }, '*');
        });
      </script>
      <button id="clear-button">üßπ Clear</button>
      <button id="save-button">üíæ Save</button>
      <button id="load-button">üìÇ Load</button>
      <button id="undo-button">‚Ü©Ô∏è Undo</button>
      <button id="redo-button">‚Ü™Ô∏è Redo</button>
      <button id="color-button">üé® Color</button>

      <div style="position: relative">
        <div
          id="color-popup"
          style="
            display: none;
            position: absolute;
            top: 0;
            left: 110%;
            background: white;
            border: 1px solid #ccc;
            padding: 5px;
            z-index: 1000;
          "
        >
          <div class="color-grid">
            <div
              class="color-swatch selected"
              style="background: black"
              data-color="#000000"
            ></div>
            <div
              class="color-swatch"
              style="background: red"
              data-color="#ff0000"
            ></div>
            <div
              class="color-swatch"
              style="background: orange"
              data-color="#ffa500"
            ></div>
            <div
              class="color-swatch"
              style="background: yellow"
              data-color="#ffff00"
            ></div>
            <div
              class="color-swatch"
              style="background: green"
              data-color="#008000"
            ></div>
            <div
              class="color-swatch"
              style="background: blue"
              data-color="#0000ff"
            ></div>
            <div
              class="color-swatch"
              style="background: purple"
              data-color="#800080"
            ></div>
            <div
              class="color-swatch"
              style="background: gray"
              data-color="#808080"
            ></div>
          </div>
        </div>
      </div>

      <br />
      <br />
      <br />
      <a
        href="/whiteboard/<%= matchKey %>/<%= teamNumber %>/autonomous"
        id="autonomous-link"
      >
        <button
          id="autonomous-button"
          style="
            background: rgb(255, 131, 131);
            padding: 10px;
            width: 100%;
            border: none;
            text-decoration: none;
          "
        >
          ü§ñ Autonomous
        </button>
      </a>
      <a
        href="/whiteboard/<%=matchKey %>/<%= teamNumber %>/teleoperated"
        id="teleop-link"
      >
        <button
          id="teleop-button"
          style="
            background: rgb(107, 255, 198);
            padding: 10px;
            width: 100%;
            border: none;
            text-decoration: none;
          "
        >
          üöÄ Teleoperated
        </button>
      </a>
      <a
        href="/whiteboard/<%=matchKey %>/<%= teamNumber %>/endgame"
        id="endgame-link"
      >
        <button
          id="endgame-button"
          style="
            background: rgb(154, 99, 255);
            padding: 10px;
            width: 100%;
            border: none;
            text-decoration: none;
          "
        >
          üèÅ Endgame
        </button>
      </a>
    </div>
    <h1 style="position: absolute; left: 200px">
      <%=gamePhase.charAt(0).toUpperCase() + gamePhase.slice(1)%>
    </h1>

    <div id="whiteboard-container">
      <canvas id="whiteboard"></canvas>
      <div
        class="draggable"
        draggable="true"
        style="top: 35%; left: 36%; background-color: red"
      >
        <%=teams[0]%>
      </div>
      <div
        class="draggable"
        draggable="true"
        style="top: 50%; left: 36%; background-color: orange"
      >
        <%=teams[1]%>
      </div>
      <div
        class="draggable"
        draggable="true"
        style="top: 65%; left: 36%; background-color: yellow"
      >
        <%=teams[2]%>
      </div>
      <div
        class="draggable"
        draggable="true"
        style="top: 35%; left: 57%; background-color: green"
      >
        <%=teams[3]%>
      </div>
      <div
        class="draggable"
        draggable="true"
        style="top: 50%; left: 57%; background-color: blue"
      >
        <%=teams[4]%>
      </div>
      <div
        class="draggable"
        draggable="true"
        style="top: 65%; left: 57%; background-color: purple"
      >
        <%=teams[5]%>
      </div>
    </div>
    <div
      id="notification"
      style="
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4caf50;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        display: none;
        z-index: 9999;
      "
    ></div>

    <script>
      let draggablePositions = [];
      let strokes = [];
      let currentStroke = [];
      let redoStack = [];
      const whiteboard = document.getElementById('whiteboard');
      // Track unsaved changes
      let isSaved = true;

      const gamePhase = '<%= gamePhase %>';
      const autonomousButton = document.getElementById('autonomous-button');
      const teleopButton = document.getElementById('teleop-button');
      const endgameButton = document.getElementById('endgame-button');

      if (gamePhase === 'autonomous') {
        autonomousButton.style.boxShadow =
          '0 0 10px 5px rgba(255, 131, 131, 0.7)';
      } else if (gamePhase === 'teleoperated') {
        teleopButton.style.boxShadow = '0 0 10px 5px rgba(107, 255, 198, 0.7)';
      } else if (gamePhase === 'endgame') {
        endgameButton.style.boxShadow = '0 0 10px 5px rgba(154, 99, 255, 0.7)';
      }

      const ctx = whiteboard.getContext('2d');
      whiteboard.style.backgroundImage = 'url(/images/reefscape-bg-2.png)';

      let drawing = false;
      let lastX = 0;
      let lastY = 0;
      let brushSize = 5;
      let brushColor = 'black';
      const colorButton = document.getElementById('color-button');
      const colorPopup = document.getElementById('color-popup');

      colorButton.addEventListener('click', () => {
        colorPopup.style.display =
          colorPopup.style.display === 'none' ? 'block' : 'none';
      });

      document.querySelectorAll('.color-swatch').forEach(swatch => {
        swatch.addEventListener('click', e => {
          brushColor = e.target.getAttribute('data-color');
          document
            .querySelectorAll('.color-swatch')
            .forEach(s => s.classList.remove('selected'));
          e.target.classList.add('selected');
          colorPopup.style.display = 'none';
        });
      });

      whiteboard.addEventListener('mousedown', e => {
        if (e.target.classList.contains('draggable')) return;
        currentStroke = [];
        drawing = true;
        lastX = (e.offsetX * whiteboard.width) / whiteboard.clientWidth;
        lastY = (e.offsetY * whiteboard.height) / whiteboard.clientHeight;
        isSaved = false;
        console.log('mousedown at', e.offsetX, e.offsetY);
      });

      whiteboard.addEventListener('mouseup', () => {
        drawing = false;
        if (currentStroke.length > 0) {
          strokes.push(currentStroke);
          redoStack = [];
        }
      });

      whiteboard.addEventListener('mouseout', () => {
        drawing = false;
        console.log('mouseout');
      });

      whiteboard.addEventListener('mousemove', e => {
        if (!drawing || e.target.classList.contains('draggable')) return;

        const x = (e.offsetX * whiteboard.width) / whiteboard.clientWidth;
        const y = (e.offsetY * whiteboard.height) / whiteboard.clientHeight;

        ctx.beginPath();
        ctx.lineWidth = brushSize;
        ctx.lineCap = 'round';
        ctx.strokeStyle = brushColor;

        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.stroke();

        currentStroke.push({ x, y, lastX, lastY, brushSize, brushColor });

        lastX = x;
        lastY = y;
        isSaved = false;
        console.log(`mousemove at ${x}, ${y}`);
      });

      function redrawWhiteboard() {
        ctx.clearRect(0, 0, whiteboard.width, whiteboard.height);
        for (const stroke of strokes) {
          for (const action of stroke) {
            ctx.beginPath();
            ctx.lineWidth = action.brushSize;
            ctx.lineCap = 'round';
            ctx.strokeStyle = action.brushColor;
            ctx.moveTo(action.lastX, action.lastY);
            ctx.lineTo(action.x, action.y);
            ctx.stroke();
          }
        }
      }

      function showNotification(message, isError = false) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.backgroundColor = isError ? '#f44336' : '#4caf50';
        notification.style.display = 'block';
        setTimeout(() => {
          notification.style.display = 'none';
        }, 3000);
      }

      // window.addEventListener('resize', () => {
      //   whiteboard.width = window.innerWidth;
      //   whiteboard.height = window.innerHeight;
      // });

      whiteboard.width = 1200;
      whiteboard.height = 600;

      const draggables = document.querySelectorAll('.draggable');
      let offsetX, offsetY;

      draggables.forEach(draggable => {
        draggable.addEventListener('mousedown', e => {
          const rect = draggable.getBoundingClientRect();
          offsetX = e.clientX - rect.left;
          offsetY = e.clientY - rect.top;
          draggable.classList.add('dragging');
          console.log('mousedown on draggable', e.clientX, e.clientY);
        });

        draggable.addEventListener('dragstart', e => {
          e.preventDefault();
          e.preventDefault();
        });

        document.addEventListener('mousemove', e => {
          if (!draggable.classList.contains('dragging')) return;

          const containerRect = document
            .getElementById('whiteboard-container')
            .getBoundingClientRect();
          const draggableWidth = draggable.offsetWidth;
          const draggableHeight = draggable.offsetHeight;

          let newLeft = e.clientX - offsetX;
          let newTop = e.clientY - offsetY;

          newLeft = Math.max(
            containerRect.left,
            Math.min(newLeft, containerRect.right - draggableWidth)
          );
          newTop = Math.max(
            containerRect.top,
            Math.min(newTop, containerRect.bottom - draggableHeight)
          );

          draggable.style.left = `${newLeft - containerRect.left}px`;
          draggable.style.top = `${newTop - containerRect.top}px`;
        });

        document.addEventListener('mouseup', () => {
          draggable.style.cursor = 'grab';
          draggable.classList.remove('dragging');
        });
      });

      function clearWhiteboard() {
        ctx.clearRect(0, 0, whiteboard.width, whiteboard.height);
        strokes = [];
        redoStack = [];
      }

      const clearButton = document.getElementById('clear-button');
      const saveButton = document.getElementById('save-button');
      const loadButton = document.getElementById('load-button');
      const undoButton = document.getElementById('undo-button');
      const redoButton = document.getElementById('redo-button');

      clearButton.addEventListener('click', () => {
        clearWhiteboard();
      });
      saveButton.addEventListener('click', () => {
        const whiteboardRect = whiteboard.getBoundingClientRect();
        document.querySelectorAll('.draggable').forEach(draggable => {
          const rect = draggable.getBoundingClientRect();
          const position = {
            left:
              ((rect.left - whiteboardRect.left) / whiteboardRect.width) * 100,
            top:
              ((rect.top - whiteboardRect.top) / whiteboardRect.height) * 100,
          };
          draggablePositions.push(position);
        });

        console.log('drag pos', draggablePositions);

        console.log(strokes);
        fetch('/save/whiteboard', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          // body: JSON.stringify({ strokes })
          body: JSON.stringify({
            data: { strokes: strokes, draggablePositions: draggablePositions },
            matchKey: '<%=matchKey%>',
            teamNumber: '<%=teamNumber%>',
            gamePhase: '<%=gamePhase%>',
          }),
        })
          .then(response => {
            if (response.ok) {
              showNotification('‚úÖ Whiteboard saved successfully!');
              isSaved = true;
            } else {
              showNotification('‚ùå Failed to save whiteboard.', true);
            }
          })
          .catch(() => {
            showNotification('‚ùå Failed to save whiteboard.', true);
          });
      });
      loadButton.addEventListener('click', () => {
        const matchKey = '<%=matchKey%>';
        const teamNumber = '<%=teamNumber%>';
        const gamePhase = '<%=gamePhase%>';

        const url = `/saved/whiteboard?matchKey=${matchKey}&teamNumber=${teamNumber}&gamePhase=${gamePhase}`;

        fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            console.log('Data:', data);
            strokes = data[0].data.strokes;
            draggablePositions = data[0].data.draggablePositions;
            updateDraggablePositions();

            console.log('Strokes:', strokes);
            console.log('Draggable Positions:', draggablePositions);
            redrawWhiteboard();
            showNotification('‚úÖ Whiteboard loaded successfully!');
          })
          .catch(error => {
            console.error('Error fetching whiteboard:', error);
            showNotification('‚ùå Failed to load whiteboard.', true);
          });
      });

      updateDraggablePositions = () => {
        const whiteboardContainer = document.getElementById(
          'whiteboard-container'
        );
        console.log('full draggable positions', draggablePositions);
        draggablePositions = draggablePositions.splice(
          draggablePositions.length - 6
        );

        document.querySelectorAll('.draggable').forEach((draggable, index) => {
          const newDraggablePosition = draggablePositions[index];
          console.log(
            'new draggable position of index ',
            index,
            'is ',
            newDraggablePosition
          );
          draggable.style.left = `${newDraggablePosition.left}%`;
          draggable.style.top = `${newDraggablePosition.top}%`;
        });
      };
      undoButton.addEventListener('click', () => {
        if (strokes.length > 0) {
          const undone = strokes.pop();
          redoStack.push(undone);
          redrawWhiteboard();
        }
      });
      redoButton.addEventListener('click', () => {
        if (redoStack.length > 0) {
          const redone = redoStack.pop();
          strokes.push(redone);
          redrawWhiteboard();
        }
      });
    </script>
  </body>
</html>

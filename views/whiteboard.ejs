<!DOCTYPE html>
<html>
<head>
  <title>Simple Whiteboard</title>
  <style>
    body {
        margin: 0;
        overflow: hidden; 
        background-color: bisque;
    }

    #whiteboard {
        background-color: white;
        cursor: crosshair;
        width: 80%;
        height: auto;
        min-height: 300px;
        max-height: 500px;
        background-image: url(/images/reefscape-bg.png);
        background-size: cover; /* This will make the image cover the entire whiteboard */
        background-repeat: no-repeat; /* This will prevent the image from repeating */
        background-position: center; /* This will center the image */   
    }

    .draggable {
        position: absolute;
        cursor: grab;
        width: 50px;
        height: 50px;
    }

    #whiteboard-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }
  </style>
</head>
<body>
    <div id="whiteboard-container">
      <canvas id="whiteboard"></canvas>

      <div class="draggable" draggable="true" style="top: 10%; left: 43%; background-color: red;"></div> 
      <div class="draggable" draggable="true" style="top: 15%; left: 43%; background-color: orange;"></div> 
      <div class="draggable" draggable="true" style="top: 20%; left: 43%; background-color: yellow;"></div> 
      <div class="draggable" draggable="true" style="top: 10%; left: 57%; background-color: green;"></div> 
      <div class="draggable" draggable="true" style="top: 15%; left: 57%; background-color: blue;"></div> 
      <div class="draggable" draggable="true" style="top: 20%; left: 57%; background-color: purple;"></div> 





    </div>  

  <script>
    const whiteboard = document.getElementById('whiteboard');
    
    const ctx = whiteboard.getContext('2d');
    whiteboard.style.backgroundImage = 'url(/images/reefscape-bg-2.png)';


    let drawing = false;
    let lastX = 0;
    let lastY = 0;
    let brushSize = 5;
    let brushColor = 'black';

    whiteboard.addEventListener('mousedown', (e) => {
      drawing = true;
      lastX = e.offsetX * whiteboard.width / whiteboard.clientWidth;
      lastY = e.offsetY * whiteboard.height / whiteboard.clientHeight;
      console.log('mousedown at', e.offsetX, e.offsetY);
    });

    whiteboard.addEventListener('mouseup', () => {
      drawing = false;
    });

    whiteboard.addEventListener('mouseout', () => {
      drawing = false;
        console.log('mouseout');
    });

    whiteboard.addEventListener('mousemove', (e) => {
      if (!drawing) return;

      const x = e.offsetX*whiteboard.width / whiteboard.clientWidth;
      const y = e.offsetY*whiteboard.height / whiteboard.clientHeight;

      ctx.beginPath();
      ctx.lineWidth = brushSize;
      ctx.lineCap = 'round';
      ctx.strokeStyle = brushColor;

      ctx.moveTo(lastX, lastY);
      ctx.lineTo(x, y);
      ctx.stroke();

      lastX = x;
      lastY = y;
      console.log(`mousemove at ${x}, ${y}`);
    });


    // Optional: Resize the whiteboard on window resize
    window.addEventListener('resize', () => {
      whiteboard.width = window.innerWidth;
      whiteboard.height = window.innerHeight;
    });

    // Initial resize
    whiteboard.width = window.innerWidth;
    whiteboard.height = window.innerHeight;


    const draggables = document.querySelectorAll('.draggable');

    draggables.forEach(draggable => {
      let offsetX, offsetY;

      draggable.addEventListener('mousedown', (e) => {
        offsetX = e.clientX - draggable.offsetLeft;
        offsetY = e.clientY - draggable.offsetTop;
        draggable.style.cursor = 'grabbing';
        draggable.classList.add('dragging');
      });

      draggable.addEventListener('dragstart', (e) => {
        e.preventDefault(); // Prevent default drag behavior

      });

      document.addEventListener('mousemove', (e) => {
        if (!draggable.classList.contains('dragging')) return;

        draggable.style.left = `${e.clientX - offsetX}px`;
        draggable.style.top = `${e.clientY - offsetY}px`;
      });

      document.addEventListener('mouseup', () => {
        draggable.style.cursor = 'grab';
        draggable.classList.remove('dragging');
      });
    });
  </script>

</body>
</html>
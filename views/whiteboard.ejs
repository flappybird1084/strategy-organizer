<!DOCTYPE html>
<html>
<head>
  <title>Simple Whiteboard</title>
  <link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css">
  <style>
    body {
        margin: 0;
        overflow: hidden; 
        background-color: bisque;
    }

    #whiteboard {
        background-color: white;
        cursor: crosshair;
        width: 1000px;
        height: auto;
        min-height: 300px;
        max-height: 500px;
        background-image: url(/images/reefscape-bg.png);
        background-size: cover; /* This will make the image cover the entire whiteboard */
        background-repeat: no-repeat; /* This will prevent the image from repeating */
        background-position: center; /* This will center the image */   
    }

    .draggable {
        position: absolute;
        cursor: grab;
        width: 50px;
        height: 50px;
    }

    #whiteboard-container {
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative; /* added */
    }

    .color-swatch {
      width: 24px;
      height: 24px;
      margin: 4px;
      display: inline-block;
      cursor: pointer;
      border: 2px solid transparent;
      box-sizing: border-box;
    }
    .color-swatch.selected {
      box-shadow: 0 0 4px 2px #333;
    }
    .color-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 4px;
    }
  </style>
</head>
<body>
  <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center;">
    <button id="clear-button">Clear</button>
    <button id="save-button">Save</button>
    <button id="load-button">Load</button>
    <button id="undo-button">Undo</button>
    <button id="redo-button">Redo</button>
    <div style="position: relative;">
      <button id="color-button">Color</button>
      <div id="color-popup" style="display: none; position: absolute; top: 100%; left: 0; background: white; border: 1px solid #ccc; padding: 5px; z-index: 1000;">
        <div class="color-grid">
          <div class="color-swatch selected" style="background: black;" data-color="#000000"></div>
          <div class="color-swatch" style="background: red;" data-color="#ff0000"></div>
          <div class="color-swatch" style="background: orange;" data-color="#ffa500"></div>
          <div class="color-swatch" style="background: yellow;" data-color="#ffff00"></div>
          <div class="color-swatch" style="background: green;" data-color="#008000"></div>
          <div class="color-swatch" style="background: blue;" data-color="#0000ff"></div>
          <div class="color-swatch" style="background: purple;" data-color="#800080"></div>
          <div class="color-swatch" style="background: gray;" data-color="#808080"></div>
        </div>
      </div>
    </div>
  </div>
    <div id="whiteboard-container">
      <canvas id="whiteboard"></canvas>
      <div class="draggable" draggable="true" style="top: 10%; left: 43%; background-color: red;"></div> 
      <div class="draggable" draggable="true" style="top: 15%; left: 43%; background-color: orange;"></div> 
      <div class="draggable" draggable="true" style="top: 20%; left: 43%; background-color: yellow;"></div> 
      <div class="draggable" draggable="true" style="top: 10%; left: 57%; background-color: green;"></div> 
      <div class="draggable" draggable="true" style="top: 15%; left: 57%; background-color: blue;"></div> 
      <div class="draggable" draggable="true" style="top: 20%; left: 57%; background-color: purple;"></div> 
    </div>  

  <script>
    let strokes = [];
    let currentStroke = [];
    let redoStack = [];
    const whiteboard = document.getElementById('whiteboard');
    
    const ctx = whiteboard.getContext('2d');
    whiteboard.style.backgroundImage = 'url(/images/reefscape-bg-2.png)';

    let drawing = false;
    let lastX = 0;
    let lastY = 0;
    let brushSize = 5;
    let brushColor = 'black';
    const colorButton = document.getElementById('color-button');
    const colorPopup = document.getElementById('color-popup');

    colorButton.addEventListener('click', () => {
      colorPopup.style.display = colorPopup.style.display === 'none' ? 'block' : 'none';
    });

    document.querySelectorAll('.color-swatch').forEach(swatch => {
      swatch.addEventListener('click', (e) => {
        brushColor = e.target.getAttribute('data-color');
        document.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('selected'));
        e.target.classList.add('selected');
        colorPopup.style.display = 'none';
      });
    });

    whiteboard.addEventListener('mousedown', (e) => {
      if (e.target.classList.contains('draggable')) return;
      currentStroke = [];
      drawing = true;
      lastX = e.offsetX * whiteboard.width / whiteboard.clientWidth;
      lastY = e.offsetY * whiteboard.height / whiteboard.clientHeight;
      console.log('mousedown at', e.offsetX, e.offsetY);
    });

    whiteboard.addEventListener('mouseup', () => {
      drawing = false;
      if (currentStroke.length > 0) {
        strokes.push(currentStroke);
        redoStack = [];
      }
    });

    whiteboard.addEventListener('mouseout', () => {
      drawing = false;
        console.log('mouseout');
    });

    whiteboard.addEventListener('mousemove', (e) => {
      if (!drawing || e.target.classList.contains('draggable')) return;

      const x = e.offsetX * whiteboard.width / whiteboard.clientWidth;
      const y = e.offsetY * whiteboard.height / whiteboard.clientHeight;

      ctx.beginPath();
      ctx.lineWidth = brushSize;
      ctx.lineCap = 'round';
      ctx.strokeStyle = brushColor;

      ctx.moveTo(lastX, lastY);
      ctx.lineTo(x, y);
      ctx.stroke();

      currentStroke.push({ x, y, lastX, lastY, brushSize, brushColor });

      lastX = x;
      lastY = y;
      console.log(`mousemove at ${x}, ${y}`);
    });

    function redrawWhiteboard() {
      ctx.clearRect(0, 0, whiteboard.width, whiteboard.height);
      for (const stroke of strokes) {
        for (const action of stroke) {
          ctx.beginPath();
          ctx.lineWidth = action.brushSize;
          ctx.lineCap = 'round';
          ctx.strokeStyle = action.brushColor;
          ctx.moveTo(action.lastX, action.lastY);
          ctx.lineTo(action.x, action.y);
          ctx.stroke();
        }
      }
    }

    // Optional: Resize the whiteboard on window resize
    window.addEventListener('resize', () => {
      whiteboard.width = window.innerWidth;
      whiteboard.height = window.innerHeight;
    });

    // Initial resize
    whiteboard.width = window.innerWidth;
    whiteboard.height = window.innerHeight;

    const draggables = document.querySelectorAll('.draggable');
    let offsetX, offsetY;

    draggables.forEach(draggable => {
      draggable.addEventListener('mousedown', (e) => {
        const rect = draggable.getBoundingClientRect();
        offsetX = e.clientX - rect.left;
        offsetY = e.clientY - rect.top;
        draggable.classList.add('dragging');
      });

      draggable.addEventListener('dragstart', (e) => {
        e.preventDefault(); // Prevent default drag behavior
      });

      document.addEventListener('mousemove', (e) => {
        if (!draggable.classList.contains('dragging')) return;

        const containerRect = document.getElementById('whiteboard-container').getBoundingClientRect();
        const draggableWidth = draggable.offsetWidth;
        const draggableHeight = draggable.offsetHeight;

        let newLeft = e.clientX - offsetX;
        let newTop = e.clientY - offsetY;

        newLeft = Math.max(containerRect.left, Math.min(newLeft, containerRect.right - draggableWidth));
        newTop = Math.max(containerRect.top, Math.min(newTop, containerRect.bottom - draggableHeight));

        draggable.style.left = `${newLeft - containerRect.left}px`;
        draggable.style.top = `${newTop - containerRect.top}px`;
      });

      document.addEventListener('mouseup', () => {
        draggable.style.cursor = 'grab';
        draggable.classList.remove('dragging');
      });
    });

    function clearWhiteboard() {
      ctx.clearRect(0, 0, whiteboard.width, whiteboard.height);
      strokes = [];
      redoStack = [];
    }

    const clearButton = document.getElementById('clear-button');
    const saveButton = document.getElementById('save-button');
    const loadButton = document.getElementById('load-button');
    const undoButton = document.getElementById('undo-button');
    const redoButton = document.getElementById('redo-button');

    clearButton.addEventListener('click', () => {
      clearWhiteboard();
    });
    saveButton.addEventListener('click', () => {
      // whiteboard.save();
      console.log(strokes);
      alert('not implemented yet!!');
    });
    loadButton.addEventListener('click', () => {
      whiteboard.load();
      alert('not implemented yet!!');
    });
    undoButton.addEventListener('click', () => {
      if (strokes.length > 0) {
        const undone = strokes.pop();
        redoStack.push(undone);
        redrawWhiteboard();
      }
    });
    redoButton.addEventListener('click', () => {
      if (redoStack.length > 0) {
        const redone = redoStack.pop();
        strokes.push(redone);
        redrawWhiteboard();
      }
    });
  </script>

</body>
</html>